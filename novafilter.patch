--- nova/api/openstack/compute/availability_zone.py        2017-01-28 10:46:30.089651396 -0500
+++ nova/api/openstack/compute/availability_zone.py        2017-01-28 09:23:26.401659914 -0500
@@ -34,14 +34,13 @@
         super(AvailabilityZoneController, self).__init__()
         self.servicegroup_api = servicegroup.API()
 
-    def _get_filtered_availability_zones(self, context, zones, is_available):
+    def _get_filtered_availability_zones(self, zones, is_available):
         result = []
         for zone in zones:
             # Hide internal_service_availability_zone
             if zone == CONF.internal_service_availability_zone:
                 continue
-           if(self._get_filtered_project_id(context,zone)):
-               result.append({'zoneName': zone,
+            result.append({'zoneName': zone,
                            'zoneState': {'available': is_available},
                            "hosts": None})
         return result
@@ -52,32 +51,17 @@
             availability_zones.get_availability_zones(ctxt)
 
         filtered_available_zones = \
-            self._get_filtered_availability_zones(context, available_zones, True)
+            self._get_filtered_availability_zones(available_zones, True)
         filtered_not_available_zones = \
-            self._get_filtered_availability_zones(context, not_available_zones, False)
+            self._get_filtered_availability_zones(not_available_zones, False)
         return {'availabilityZoneInfo': filtered_available_zones +
                                         filtered_not_available_zones}
-  
-    def _get_filtered_project_id(self,context,zone):
-       ctxt = context.elevated()
-       aggregates = objects.AggregateList.get_all(context)
-       #if context.is_admin:
-       #       return True
-        if zone == CONF.internal_service_availability_zone:
-               return True
-       for aggregate in aggregates:
-               if(aggregate.metadata.get("availability_zone",None) == zone):
-                       if(aggregate.metadata.get("filter_tenant_id",None)):
-                               if(context.project_id in (aggregate.metadata.get("filter_tenant_id",None))):
-                                       return True
-                       else:
-                               return True
-       return False
 
     def _describe_availability_zones_verbose(self, context, **kwargs):
         ctxt = context.elevated()
         available_zones, not_available_zones = \
             availability_zones.get_availability_zones(ctxt)
+
         # Available services
         enabled_services = objects.ServiceList.get_all(context, disabled=False,
                                                        set_zones=True)
@@ -104,14 +88,12 @@
                     hosts[host][service['binary']] = {'available': alive,
                                       'active': True != service['disabled'],
                                       'updated_at': service['updated_at']}
-           if(self._get_filtered_project_id(context,zone)):
-                   result.append({'zoneName': zone,
+            result.append({'zoneName': zone,
                            'zoneState': {'available': True},
                            "hosts": hosts})
 
         for zone in not_available_zones:
-           if(self._get_filtered_project_id(context,zone)):
-                   result.append({'zoneName': zone,
+            result.append({'zoneName': zone,
                            'zoneState': {'available': False},
                            "hosts": None})
         return {'availabilityZoneInfo': result}

